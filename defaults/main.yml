---
# Some sane PF defaults

pf_device_name: '/dev/pf'
pf_device_owner: root
pf_device_group: wheel
pf_device_mode: '600'

pf_fail2ban: False
pf_fail2ban_table: f2b
pf_fail2ban_dir: '/usr/local/etc/fail2ban'
pf_fail2ban_persistfile: '/var/db/fail2ban/fail2ban.txt'
pf_pflog_owner: root
pf_pflog_group: network
pf_fail2ban_purge: '1d'
pf_fail2ban_loglevel: 'INFO'
pf_fail2ban_bantime: '90days'
pf_fail2ban_findtime: '1day'
pf_fail2ban_ignoreip:
  - 127.0.0.1
  - ::1
  - fe80::/10

pf_ipdbtools: False
pf_ipdb_when: weekly    # Values can also be daily or security
pf_ipdb_dir: '/usr/local/etc/ipdbtools'
pf_ipdb_persistfile: "{{ pf_ipdb_dir }}/ipdb.txt"
pf_ipdb_table: 'ipdb'
pf_ipdb_cc_block:
  - CN
  - RU

pf_primary_interface: 'em0'

pf_udp_pass:
  - domain
pf_tcp_pass_in:
  - domain
  - ssh
  - http
  - https

pf_skip:
  - lo0
  - pflog0

pf_tables:
  - { key: 'me', value: "const { {{ (ansible_all_ipv4_addresses + ansible_all_ipv6_addresses) | join(' ') }} }" }
  - { key: 'privatenets', value: "const { 0.0.0.0/8 10.0.0.0/8 20.20.20.0/24 127.0.0.0/8 169.254.0.0/16 172.16.0.0/12 192.0.2.0/24 192.168.0.0/16 224.0.0.0/3 }" }
  #- { key: ""{{ pf_fail2ban_table}}", value: "persist counters file \"{{ pf_fail2ban_persistfile }}\""
  #- { key: "{{ pf_ipdb_table }}", value: 'persist counters file "{{ pf_ipdb_persistfile }}"'

pf_options:
  - { key: 'ruleset-optimization', value: 'basic' }
  - { key: 'optimization', value: 'normal' }
  - { key: 'block-policy', value: 'drop' }
  - { key: 'fail-policy', value: 'drop' }
  - { key: 'state-policy', value: 'if-bound' }
  - { key: 'debug', value: 'urgent' }

pf_rules:
  - 'scrub in all'
  #- "block drop in quick log on {{ pf_primary_interface }} from <{{ pf_fail2ban_table }}> to any"                                      # Enable if we want to use py-fail2ban
  #- "block drop in quick log on {{ pf_primary_interface }} from <{{ pf_ipdb_table }}> to any"                      # Enable if we want to use ipdbtools to block countries
  #- "block drop in from any to any port { {{ pf_nolog_ports | join(' ') }} }"                                      # Do not log certain traffic
  # NAT based rules
  #- "nat on {{ pf_primary_interface }} inet from !({{ pf_primary_interface }}) -> ({{ pf_primary_interface }}:0)"
  #- "block drop in quick log on {{ pf_primary_interface }} from <privatenets> to any"
  #- "block drop out quick log on {{ pf_primary_interface }} from any to <privatenets>"
  - "block in log on { {{ pf_primary_interface }} }"
  - "antispoof quick log for { {{ ansible_interfaces | join(' ') }} }"
  # Allow all outbound traffic
  - 'pass out all allow-opts keep state'
  # DHCP(v6) rules
  - "pass in on {{ pf_primary_interface }} proto { tcp, udp } from any to any port { bootps, bootpc, dhcpv6-client, dhcpv6-server }"
  - "pass in on {{ pf_primary_interface }} inet6 proto icmp6 from any to ff02::/16 "
  - "pass in on {{ pf_primary_interface }} inet6 proto icmp6 from fe80::/10 to fe80::/10"
  - "pass in on {{ pf_primary_interface }} inet6 proto icmp6 from fe80::/10 to ff02::/16 "
  - "pass in on {{ pf_primary_interface }} inet6 proto icmp6 from any to any icmp6-type { unreach, toobig, timex, echoreq, echorep, neighbrsol, neighbradv }"
  # Generic rules
  - "pass in on {{ pf_primary_interface }} proto udp from any to <me> port { {{ pf_udp_pass | join(', ') }} } flags any"
  - "pass out on {{ pf_primary_interface }} proto udp from <me> to any port { {{ pf_udp_pass | join(', ') }} } flags any"
  - "pass in on {{ pf_primary_interface }} proto tcp from any to <me> port { {{ pf_tcp_pass_in | join(', ') }} } flags any"

pf_rc_conf:
- name: "pf_enable"
  value: "YES"
- name: "pf_flags"
  value: ""
- name: "pflog_enable"
  value: "YES"
- name: "pflog_logfile"
  value: "/var/log/pflog"
- name: "pflog_flags"
  value: ""
- name: "pf_rules"
  value: "/etc/pf.conf"
- name: "gateway_enable"
  value: "{{ pf_enable_gateway | ternary('YES', 'NO') }}"
- name: "ipv6_gateway_enable"
  value: "{{ pf_enable_gateway | ternary('YES', 'NO') }}"
